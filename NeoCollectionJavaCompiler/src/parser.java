
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 27 18:07:28 IRST 2016
//----------------------------------------------------

import java.io.File;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 27 18:07:28 IRST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\007\000\002\003\011\000\002\004\004" +
    "\000\002\004\004\000\002\004\002\000\002\005\005\000" +
    "\002\006\015\000\002\006\012\000\002\007\005\000\002" +
    "\007\004\000\002\007\005\000\002\007\004\000\002\007" +
    "\004\000\002\007\003\000\002\007\004\000\002\010\003" +
    "\000\002\010\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\005\000\002\012\005\000\002" +
    "\013\004\000\002\013\006\000\002\013\002\000\002\014" +
    "\003\000\002\014\005\000\002\015\003\000\002\015\005" +
    "\000\002\015\003\000\002\016\005\000\002\016\007\000" +
    "\002\016\006\000\002\016\011\000\002\016\007\000\002" +
    "\016\007\000\002\016\002\000\002\017\006\000\002\017" +
    "\003\000\002\017\006\000\002\017\005\000\002\017\005" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\006\000\002\017\007\000\002\017\007\000\002" +
    "\017\002\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\006\002\uffff\046\uffff\001\002\000\006\002" +
    "\007\046\006\001\002\000\006\002\001\046\001\001\002" +
    "\000\004\054\010\001\002\000\004\002\000\001\002\000" +
    "\006\016\011\023\012\001\002\000\024\011\ufffa\012\ufffa" +
    "\013\ufffa\017\ufffa\024\ufffa\047\ufffa\050\ufffa\052\ufffa\054" +
    "\ufffa\001\002\000\004\054\013\001\002\000\004\016\014" +
    "\001\002\000\024\011\ufffa\012\ufffa\013\ufffa\017\ufffa\024" +
    "\ufffa\047\ufffa\050\ufffa\052\ufffa\054\ufffa\001\002\000\024" +
    "\011\017\012\024\013\023\017\033\024\032\047\020\050" +
    "\030\052\021\054\027\001\002\000\004\054\ufff1\001\002" +
    "\000\006\007\171\054\uffed\001\002\000\014\011\017\012" +
    "\024\013\023\052\167\054\027\001\002\000\012\011\017" +
    "\012\024\013\023\054\027\001\002\000\004\054\uffef\001" +
    "\002\000\004\054\uffec\001\002\000\004\054\uffeb\001\002" +
    "\000\004\054\uffee\001\002\000\004\054\043\001\002\000" +
    "\004\007\041\001\002\000\014\011\017\012\024\013\023" +
    "\052\037\054\027\001\002\000\024\011\ufffb\012\ufffb\013" +
    "\ufffb\017\ufffb\024\ufffb\047\ufffb\050\ufffb\052\ufffb\054\ufffb" +
    "\001\002\000\022\011\017\012\024\013\023\024\032\047" +
    "\020\050\030\052\021\054\027\001\002\000\006\002\ufffd" +
    "\046\ufffd\001\002\000\024\011\ufffc\012\ufffc\013\ufffc\017" +
    "\ufffc\024\ufffc\047\ufffc\050\ufffc\052\ufffc\054\ufffc\001\002" +
    "\000\004\054\ufff0\001\002\000\004\054\ufff3\001\002\000" +
    "\012\011\017\012\024\013\023\054\027\001\002\000\004" +
    "\054\ufff4\001\002\000\004\010\042\001\002\000\004\054" +
    "\uffe9\001\002\000\006\004\044\014\045\001\002\000\024" +
    "\011\ufff9\012\ufff9\013\ufff9\017\ufff9\024\ufff9\047\ufff9\050" +
    "\ufff9\052\ufff9\054\ufff9\001\002\000\014\011\017\012\024" +
    "\013\023\015\uffe6\054\027\001\002\000\004\015\053\001" +
    "\002\000\004\054\050\001\002\000\006\005\051\015\uffe8" +
    "\001\002\000\014\011\017\012\024\013\023\015\uffe6\054" +
    "\027\001\002\000\004\015\uffe7\001\002\000\004\016\054" +
    "\001\002\000\024\011\017\012\024\013\023\016\057\017" +
    "\uffda\020\056\021\uffda\051\063\054\062\001\002\000\004" +
    "\054\161\001\002\000\004\014\155\001\002\000\022\011" +
    "\017\012\024\013\023\016\057\017\uffda\020\056\051\063" +
    "\054\062\001\002\000\012\006\113\007\137\014\140\022" +
    "\136\001\002\000\006\017\065\021\064\001\002\000\012" +
    "\006\uffe1\007\uffe1\014\uffe1\022\uffe1\001\002\000\034\004" +
    "\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\014\uffe3\015\uffe3" +
    "\022\uffe3\036\uffe3\037\uffe3\041\uffe3\042\uffe3\043\uffe3\001" +
    "\002\000\034\004\uffce\014\075\036\uffce\037\uffce\041\uffce" +
    "\042\uffce\043\uffce\044\070\045\073\051\063\053\067\054" +
    "\074\055\066\001\002\000\024\011\ufff7\012\ufff7\013\ufff7" +
    "\017\ufff7\024\ufff7\047\ufff7\050\ufff7\052\ufff7\054\ufff7\001" +
    "\002\000\024\004\uffd4\005\uffd4\010\uffd4\015\uffd4\036\uffd4" +
    "\037\uffd4\041\uffd4\042\uffd4\043\uffd4\001\002\000\006\011" +
    "\125\054\124\001\002\000\024\004\uffd3\005\uffd3\010\uffd3" +
    "\015\uffd3\036\uffd3\037\uffd3\041\uffd3\042\uffd3\043\uffd3\001" +
    "\002\000\032\004\uffd8\005\uffd8\006\113\007\111\010\uffd8" +
    "\014\112\015\uffd8\036\uffd8\037\uffd8\041\uffd8\042\uffd8\043" +
    "\uffd8\001\002\000\016\004\107\036\102\037\103\041\105" +
    "\042\104\043\077\001\002\000\024\004\uffd2\005\uffd2\010" +
    "\uffd2\015\uffd2\036\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\001\002\000\032\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\014\uffe1\015\uffe1\036\uffe1\037\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\001\002\000\034\014\075\015\uffce\036\uffce\037" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\070\045\073\051\063" +
    "\053\067\054\074\055\066\001\002\000\016\015\100\036" +
    "\102\037\103\041\105\042\104\043\077\001\002\000\042" +
    "\004\uffc9\005\uffc9\010\uffc9\014\uffc9\015\uffc9\036\uffc9\037" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\051\uffc9" +
    "\053\uffc9\054\uffc9\055\uffc9\001\002\000\024\004\uffd5\005" +
    "\uffd5\010\uffd5\015\uffd5\036\uffd5\037\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\001\002\000\042\004\uffce\005\uffce\010\uffce\014" +
    "\075\015\uffce\036\uffce\037\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\070\045\073\051\063\053\067\054\074\055\066\001" +
    "\002\000\042\004\uffcd\005\uffcd\010\uffcd\014\uffcd\015\uffcd" +
    "\036\uffcd\037\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\051\uffcd\053\uffcd\054\uffcd\055\uffcd\001\002\000\042" +
    "\004\uffcc\005\uffcc\010\uffcc\014\uffcc\015\uffcc\036\uffcc\037" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\051\uffcc" +
    "\053\uffcc\054\uffcc\055\uffcc\001\002\000\042\004\uffca\005" +
    "\uffca\010\uffca\014\uffca\015\uffca\036\uffca\037\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\051\uffca\053\uffca\054" +
    "\uffca\055\uffca\001\002\000\042\004\uffcb\005\uffcb\010\uffcb" +
    "\014\uffcb\015\uffcb\036\uffcb\037\uffcb\041\uffcb\042\uffcb\043" +
    "\uffcb\044\uffcb\045\uffcb\051\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\001\002\000\024\004\uffd6\005\uffd6\010\uffd6\015\uffd6\036" +
    "\102\037\103\041\105\042\104\043\077\001\002\000\004" +
    "\017\110\001\002\000\024\011\ufff8\012\ufff8\013\ufff8\017" +
    "\ufff8\024\ufff8\047\ufff8\050\ufff8\052\ufff8\054\ufff8\001\002" +
    "\000\034\010\uffce\014\075\036\uffce\037\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\070\045\073\051\063\053\067\054\074" +
    "\055\066\001\002\000\036\005\uffce\014\075\015\uffce\036" +
    "\uffce\037\uffce\041\uffce\042\uffce\043\uffce\044\070\045\073" +
    "\051\063\053\067\054\074\055\066\001\002\000\004\054" +
    "\114\001\002\000\034\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\010\uffe2\014\uffe2\015\uffe2\022\uffe2\036\uffe2\037\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\001\002\000\004\015\121\001\002" +
    "\000\020\005\117\015\uffe5\036\102\037\103\041\105\042" +
    "\104\043\077\001\002\000\036\005\uffce\014\075\015\uffce" +
    "\036\uffce\037\uffce\041\uffce\042\uffce\043\uffce\044\070\045" +
    "\073\051\063\053\067\054\074\055\066\001\002\000\004" +
    "\015\uffe4\001\002\000\024\004\uffd7\005\uffd7\010\uffd7\015" +
    "\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7\001\002" +
    "\000\016\010\123\036\102\037\103\041\105\042\104\043" +
    "\077\001\002\000\024\004\uffd9\005\uffd9\010\uffd9\015\uffd9" +
    "\036\uffd9\037\uffd9\041\uffd9\042\uffd9\043\uffd9\001\002\000" +
    "\006\007\131\014\132\001\002\000\004\007\126\001\002" +
    "\000\034\010\uffce\014\075\036\uffce\037\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\070\045\073\051\063\053\067\054\074" +
    "\055\066\001\002\000\016\010\130\036\102\037\103\041" +
    "\105\042\104\043\077\001\002\000\024\004\uffd0\005\uffd0" +
    "\010\uffd0\015\uffd0\036\uffd0\037\uffd0\041\uffd0\042\uffd0\043" +
    "\uffd0\001\002\000\034\010\uffce\014\075\036\uffce\037\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\070\045\073\051\063\053" +
    "\067\054\074\055\066\001\002\000\004\015\133\001\002" +
    "\000\024\004\uffd1\005\uffd1\010\uffd1\015\uffd1\036\uffd1\037" +
    "\uffd1\041\uffd1\042\uffd1\043\uffd1\001\002\000\016\010\135" +
    "\036\102\037\103\041\105\042\104\043\077\001\002\000" +
    "\024\004\uffcf\005\uffcf\010\uffcf\015\uffcf\036\uffcf\037\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\001\002\000\034\004\uffce\014" +
    "\075\036\uffce\037\uffce\041\uffce\042\uffce\043\uffce\044\070" +
    "\045\073\051\063\053\067\054\074\055\066\001\002\000" +
    "\034\010\uffce\014\075\036\uffce\037\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\070\045\073\051\063\053\067\054\074\055" +
    "\066\001\002\000\036\005\uffce\014\075\015\uffce\036\uffce" +
    "\037\uffce\041\uffce\042\uffce\043\uffce\044\070\045\073\051" +
    "\063\053\067\054\074\055\066\001\002\000\004\015\142" +
    "\001\002\000\004\004\143\001\002\000\006\017\uffdc\021" +
    "\uffdc\001\002\000\016\010\145\036\102\037\103\041\105" +
    "\042\104\043\077\001\002\000\004\022\146\001\002\000" +
    "\034\004\uffce\014\075\036\uffce\037\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\070\045\073\051\063\053\067\054\074\055" +
    "\066\001\002\000\016\004\150\036\102\037\103\041\105" +
    "\042\104\043\077\001\002\000\006\017\uffdd\021\uffdd\001" +
    "\002\000\016\004\152\036\102\037\103\041\105\042\104" +
    "\043\077\001\002\000\006\017\uffde\021\uffde\001\002\000" +
    "\004\017\154\001\002\000\006\017\uffe0\021\uffe0\001\002" +
    "\000\034\014\075\015\uffce\036\uffce\037\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\070\045\073\051\063\053\067\054\074" +
    "\055\066\001\002\000\016\015\157\036\102\037\103\041" +
    "\105\042\104\043\077\001\002\000\024\011\017\012\024" +
    "\013\023\016\057\017\uffda\020\056\021\uffda\051\063\054" +
    "\062\001\002\000\006\017\uffdb\021\uffdb\001\002\000\004" +
    "\022\162\001\002\000\034\004\uffce\014\075\036\uffce\037" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\070\045\073\051\063" +
    "\053\067\054\074\055\066\001\002\000\016\004\164\036" +
    "\102\037\103\041\105\042\104\043\077\001\002\000\006" +
    "\017\uffdf\021\uffdf\001\002\000\004\054\ufff2\001\002\000" +
    "\004\054\ufff5\001\002\000\012\011\017\012\024\013\023" +
    "\054\027\001\002\000\004\054\ufff6\001\002\000\004\010" +
    "\172\001\002\000\004\054\uffea\001\002\000\024\011\017" +
    "\012\024\013\023\017\174\024\032\047\020\050\030\052" +
    "\021\054\027\001\002\000\006\002\ufffe\046\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\004\002\003\001\001\000\004\003\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\014\001\001\000\016" +
    "\005\033\006\030\007\025\010\015\011\021\012\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\165" +
    "\011\021\012\024\001\001\000\010\010\164\011\021\012" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\035\011\021\012\024\001\001\000\002" +
    "\001\001\000\012\007\034\010\015\011\021\012\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\037\011\021\012\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\010\046\011" +
    "\021\012\024\013\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\046\011\021\012" +
    "\024\013\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\010\054\011\021\012\024\015\057\016\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\010\054" +
    "\011\021\012\024\015\057\016\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\070\017\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\070\017\075\001\001\000\004" +
    "\020\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\070\017\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\070\017\121\001\001\000\010\014\114\015\070\017" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\100\001\001\000\010\014\117\015" +
    "\070\017\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\070\017\126\001\001" +
    "\000\004\020\100\001\001\000\002\001\001\000\006\015" +
    "\070\017\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\100\001\001\000\002\001\001\000\006\015" +
    "\070\017\150\001\001\000\006\015\070\017\143\001\001" +
    "\000\010\014\140\015\070\017\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\100" +
    "\001\001\000\002\001\001\000\006\015\070\017\146\001" +
    "\001\000\004\020\100\001\001\000\002\001\001\000\004" +
    "\020\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\070\017\155\001\001\000\004" +
    "\020\100\001\001\000\014\010\054\011\021\012\024\015" +
    "\057\016\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\070\017\162\001\001\000\004\020\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\167\011\021\012\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\033" +
    "\006\030\007\025\010\015\011\021\012\024\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	ArrayList<String> declarationList = new ArrayList<String>();
	ArrayList<String> methodList = new ArrayList<String>();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Binop ::= MOD 
            {
              String RESULT =null;
		 RESULT = new String(" % "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Binop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Binop ::= DIV 
            {
              String RESULT =null;
		 RESULT = new String(" / "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Binop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Binop ::= TIMES 
            {
              String RESULT =null;
		 RESULT = new String(" * "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Binop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Binop ::= MINUS 
            {
              String RESULT =null;
		 RESULT = new String(" - "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Binop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Binop ::= PLUS 
            {
              String RESULT =null;
		 RESULT = new String(" + "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Binop",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expression ::= 
            {
              String RESULT =null;
		 RESULT = new String(""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expression ::= NEW ID LBRACK Expression RBRACK 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("new " + e1 + "[" + e2 + "]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expression ::= NEW INT LBRACK Expression RBRACK 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("new int[" + e1 + "]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= NEW ID LPAREN RPAREN 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new String("new " + e1 + "()"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= FALSE 
            {
              String RESULT =null;
		 RESULT = new String("false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= TRUE 
            {
              String RESULT =null;
		 RESULT = new String("true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= NUM 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= LPAREN Expression RPAREN 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("(" + e1 + ")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= Expression Binop Expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1 + e2 + e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= Reference LPAREN ArgumentList RPAREN 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1 + "(" + e3 + ")"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= Reference 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= Reference LBRACK Expression RBRACK 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1 + "[" + e3 + "]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Statement ::= 
            {
              String RESULT =null;
		 RESULT = new String(""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statement ::= WHILE LPAREN Expression RPAREN Statement 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("while(" + e1 + ")\n" + e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statement ::= Reference LPAREN ArgumentList RPAREN SEMI 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new String(e1 + "(" + e2 + ");\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Statement ::= Reference LBRACK Expression RBRACK EQ Expression SEMI 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(e1 + "[" + e2 + "]" + " = " + e3 + ";\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Statement ::= Reference EQ Expression SEMI 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(e1 + " = " + e2 + ";\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Statement ::= Type ID EQ Expression SEMI 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(e1 + " " + e2 + " = " + e3 + ";\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Statement ::= LBRACE Statement RBRACE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("{\n" + e1 + "\n}\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Reference ::= ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reference",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Reference ::= Reference DOT ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1 + "." + e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reference",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Reference ::= THIS 
            {
              String RESULT =null;
		 RESULT = new String("this"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Reference",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ArgumentList ::= Expression COMMA ArgumentList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1 + " , " + e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ArgumentList ::= Expression 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArgumentList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParameterList ::= 
            {
              String RESULT =null;
		 RESULT = new String(""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParameterList ::= Type ID COMMA ParameterList 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1 + " " + e2 + " , " + e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ParameterList ::= Type ID 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1 + " " + e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParameterList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ArrType ::= ID LBRACK RBRACK 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new String(e1 + "[]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ArrType ::= INT LBRACK RBRACK 
            {
              String RESULT =null;
		 RESULT = new String("int[]"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArrType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PrimType ::= VOID 
            {
              String RESULT =null;
		 RESULT = new String("void "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimType",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PrimType ::= BOOLEAN 
            {
              String RESULT =null;
		 RESULT = new String("boolean "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimType",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PrimType ::= INT 
            {
              String RESULT =null;
		 RESULT = new String("int "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimType",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Type ::= ArrType 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= PrimType 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Declarators ::= OPERATION Declarators 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("operation " + e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarators",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Declarators ::= Type 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarators",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Declarators ::= STATIC Type 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("static " + e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarators",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Declarators ::= PRIVATE Type 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("private " + e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarators",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Declarators ::= PRIVATE STATIC Type 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("private static " + e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarators",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Declarators ::= PUBLIC Type 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("public " + e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarators",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Declarators ::= PUBLIC STATIC Type 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String("public static " + e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declarators",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MethodDeclaration ::= Declarators ID LPAREN ParameterList RPAREN LBRACE Statement RBRACE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(e1 + e2 + "(" + e3 + ")" + "{\n" + e4 + "\n}"); if(e1.contains("operation")) methodList.add(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MethodDeclaration ::= Declarators ID LPAREN ParameterList RPAREN LBRACE Statement RETURN Expression SEMI RBRACE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new String(e1 + e2 + "(" + e3 + ")\n" + "{\n" + e4 + "return " + e5 + ";\n}"); if(e1.contains("operation")) methodList.add(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FieldDeclaration ::= Declarators ID SEMI 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String(e1 + " " + e2 + ";\n"); declarationList.add(RESULT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Declaration ::= 
            {
              String RESULT =null;
		 RESULT = new String(""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Declaration ::= Declaration MethodDeclaration 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1 + e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Declaration ::= Declaration FieldDeclaration 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new String(e1 + e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDeclaration ::= CLASS ID ADDTO ID LBRACE Declaration RBRACE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("class " + e1 + " addto " + e2 + "\n{\n" + e3 + "\n}"); Adder.addToFile(declarationList,methodList,new File(String.format("%s.mjava",e2))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDeclaration ::= CLASS ID LBRACE Declaration RBRACE 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new String("class " + e1 + "\n{\n" + e2 + "\n}"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= 
            {
              String RESULT =null;
		 RESULT = new String(""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= Program ClassDeclaration 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println(e1 + e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

